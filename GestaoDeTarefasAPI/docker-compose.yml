version: '3.4'

services:
  # Serviço do SQL Server
  sqlserver:
    image: mcr.microsoft.com/mssql/server
    environment:
      - SA_PASSWORD=teste@123
      - ACCEPT_EULA=Y
    ports:
      - "1433:1433" # Mapeia a porta 1433 do contêiner para a porta 1433 da sua máquina hospedeira
    networks:
      - mynetwork # Conecta à rede interna do Docker Compose
    healthcheck: # Healthcheck para verificar se o SQL Server está pronto
      # ALTERADO: Usando uma verificação de porta TCP mais robusta
      test: ["CMD-SHELL", "/bin/bash -c 'echo > /dev/tcp/localhost/1433 || exit 1'"]
      interval: 10s
      timeout: 5s
      retries: 100
      start_period: 60s
    volumes: # Persiste os dados do SQL Server para inicializações mais rápidas
      - sqlserver_data:/var/opt/mssql

  # Serviço da sua API ASP.NET Core
  gestaodetarefasapi: # Nome do seu serviço (pode ser o nome da pasta do projeto ou outro nome amigável)
    build:
      context: . # Contexto de build é a pasta do seu projeto
      dockerfile: Dockerfile        # Dockerfile está DENTRO desse contexto
    ports:
      - "8080:8080" # Mapeia a porta HTTP 8080 do contêiner para a porta 8080 da sua máquina hospedeira
      - "8081:8081" # Mantemos o mapeamento para 8081, embora a API só escute 8080
    environment:
      - ASPNETCORE_URLS=http://+:8080 # API escuta apenas em HTTP na porta 8080
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=GestaoDeTarefasDB;User Id=sa;Password=teste@123;TrustServerCertificate=True;
    depends_on: # Garante que o SQL Server esteja SAUDÁVEL antes da API iniciar
      sqlserver:
        condition: service_healthy
    networks:
      - mynetwork

networks:
  mynetwork:

volumes: # Definição do volume para persistência de dados
  sqlserver_data: